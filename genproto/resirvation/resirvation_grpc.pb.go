// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: resirvation.proto

package resirvation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResirvationClient is the client API for Resirvation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResirvationClient interface {
	CreateRestaurant(ctx context.Context, in *Restuarant, opts ...grpc.CallOption) (*Status, error)
	GetAllRestaurants(ctx context.Context, in *AllRestuarant, opts ...grpc.CallOption) (*Restuanants, error)
	GetRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*GetRes, error)
	UpdateRestuarant(ctx context.Context, in *GetRes, opts ...grpc.CallOption) (*Status, error)
	DeleteRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*Status, error)
	Createreservations(ctx context.Context, in *RequestReservations, opts ...grpc.CallOption) (*Status, error)
	GetAllReservations(ctx context.Context, in *AllReservations, opts ...grpc.CallOption) (*Reservations, error)
	GetByIdReservations(ctx context.Context, in *ReservationId, opts ...grpc.CallOption) (*Reservation, error)
	UpdateReservations(ctx context.Context, in *Reservation, opts ...grpc.CallOption) (*Status, error)
	DeleteReservations(ctx context.Context, in *ReservationId, opts ...grpc.CallOption) (*Status, error)
	GetReservationsCheck(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Reservations, error)
	CreateReservationsOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Status, error)
	CreateReservationsPayment(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Status, error)
}

type resirvationClient struct {
	cc grpc.ClientConnInterface
}

func NewResirvationClient(cc grpc.ClientConnInterface) ResirvationClient {
	return &resirvationClient{cc}
}

func (c *resirvationClient) CreateRestaurant(ctx context.Context, in *Restuarant, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/CreateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) GetAllRestaurants(ctx context.Context, in *AllRestuarant, opts ...grpc.CallOption) (*Restuanants, error) {
	out := new(Restuanants)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/GetAllRestaurants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) GetRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*GetRes, error) {
	out := new(GetRes)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/GetRestuarant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) UpdateRestuarant(ctx context.Context, in *GetRes, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/UpdateRestuarant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) DeleteRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/DeleteRestuarant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) Createreservations(ctx context.Context, in *RequestReservations, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/Createreservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) GetAllReservations(ctx context.Context, in *AllReservations, opts ...grpc.CallOption) (*Reservations, error) {
	out := new(Reservations)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/GetAllReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) GetByIdReservations(ctx context.Context, in *ReservationId, opts ...grpc.CallOption) (*Reservation, error) {
	out := new(Reservation)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/GetByIdReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) UpdateReservations(ctx context.Context, in *Reservation, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/UpdateReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) DeleteReservations(ctx context.Context, in *ReservationId, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/DeleteReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) GetReservationsCheck(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Reservations, error) {
	out := new(Reservations)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/GetReservationsCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) CreateReservationsOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/CreateReservationsOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) CreateReservationsPayment(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/resirvation.Resirvation/CreateReservationsPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResirvationServer is the server API for Resirvation service.
// All implementations must embed UnimplementedResirvationServer
// for forward compatibility
type ResirvationServer interface {
	CreateRestaurant(context.Context, *Restuarant) (*Status, error)
	GetAllRestaurants(context.Context, *AllRestuarant) (*Restuanants, error)
	GetRestuarant(context.Context, *RestuanantId) (*GetRes, error)
	UpdateRestuarant(context.Context, *GetRes) (*Status, error)
	DeleteRestuarant(context.Context, *RestuanantId) (*Status, error)
	Createreservations(context.Context, *RequestReservations) (*Status, error)
	GetAllReservations(context.Context, *AllReservations) (*Reservations, error)
	GetByIdReservations(context.Context, *ReservationId) (*Reservation, error)
	UpdateReservations(context.Context, *Reservation) (*Status, error)
	DeleteReservations(context.Context, *ReservationId) (*Status, error)
	GetReservationsCheck(context.Context, *UserId) (*Reservations, error)
	CreateReservationsOrder(context.Context, *Order) (*Status, error)
	CreateReservationsPayment(context.Context, *Payment) (*Status, error)
	mustEmbedUnimplementedResirvationServer()
}

// UnimplementedResirvationServer must be embedded to have forward compatible implementations.
type UnimplementedResirvationServer struct {
}

func (UnimplementedResirvationServer) CreateRestaurant(context.Context, *Restuarant) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestaurant not implemented")
}
func (UnimplementedResirvationServer) GetAllRestaurants(context.Context, *AllRestuarant) (*Restuanants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRestaurants not implemented")
}
func (UnimplementedResirvationServer) GetRestuarant(context.Context, *RestuanantId) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestuarant not implemented")
}
func (UnimplementedResirvationServer) UpdateRestuarant(context.Context, *GetRes) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestuarant not implemented")
}
func (UnimplementedResirvationServer) DeleteRestuarant(context.Context, *RestuanantId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRestuarant not implemented")
}
func (UnimplementedResirvationServer) Createreservations(context.Context, *RequestReservations) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Createreservations not implemented")
}
func (UnimplementedResirvationServer) GetAllReservations(context.Context, *AllReservations) (*Reservations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReservations not implemented")
}
func (UnimplementedResirvationServer) GetByIdReservations(context.Context, *ReservationId) (*Reservation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdReservations not implemented")
}
func (UnimplementedResirvationServer) UpdateReservations(context.Context, *Reservation) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReservations not implemented")
}
func (UnimplementedResirvationServer) DeleteReservations(context.Context, *ReservationId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReservations not implemented")
}
func (UnimplementedResirvationServer) GetReservationsCheck(context.Context, *UserId) (*Reservations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservationsCheck not implemented")
}
func (UnimplementedResirvationServer) CreateReservationsOrder(context.Context, *Order) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservationsOrder not implemented")
}
func (UnimplementedResirvationServer) CreateReservationsPayment(context.Context, *Payment) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservationsPayment not implemented")
}
func (UnimplementedResirvationServer) mustEmbedUnimplementedResirvationServer() {}

// UnsafeResirvationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResirvationServer will
// result in compilation errors.
type UnsafeResirvationServer interface {
	mustEmbedUnimplementedResirvationServer()
}

func RegisterResirvationServer(s grpc.ServiceRegistrar, srv ResirvationServer) {
	s.RegisterService(&Resirvation_ServiceDesc, srv)
}

func _Resirvation_CreateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restuarant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).CreateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/CreateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).CreateRestaurant(ctx, req.(*Restuarant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_GetAllRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllRestuarant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).GetAllRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/GetAllRestaurants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).GetAllRestaurants(ctx, req.(*AllRestuarant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_GetRestuarant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestuanantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).GetRestuarant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/GetRestuarant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).GetRestuarant(ctx, req.(*RestuanantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_UpdateRestuarant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).UpdateRestuarant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/UpdateRestuarant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).UpdateRestuarant(ctx, req.(*GetRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_DeleteRestuarant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestuanantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).DeleteRestuarant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/DeleteRestuarant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).DeleteRestuarant(ctx, req.(*RestuanantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_Createreservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReservations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).Createreservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/Createreservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).Createreservations(ctx, req.(*RequestReservations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_GetAllReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllReservations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).GetAllReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/GetAllReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).GetAllReservations(ctx, req.(*AllReservations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_GetByIdReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).GetByIdReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/GetByIdReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).GetByIdReservations(ctx, req.(*ReservationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_UpdateReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reservation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).UpdateReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/UpdateReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).UpdateReservations(ctx, req.(*Reservation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_DeleteReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).DeleteReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/DeleteReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).DeleteReservations(ctx, req.(*ReservationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_GetReservationsCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).GetReservationsCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/GetReservationsCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).GetReservationsCheck(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_CreateReservationsOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).CreateReservationsOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/CreateReservationsOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).CreateReservationsOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_CreateReservationsPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).CreateReservationsPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resirvation.Resirvation/CreateReservationsPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).CreateReservationsPayment(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

// Resirvation_ServiceDesc is the grpc.ServiceDesc for Resirvation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resirvation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resirvation.Resirvation",
	HandlerType: (*ResirvationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRestaurant",
			Handler:    _Resirvation_CreateRestaurant_Handler,
		},
		{
			MethodName: "GetAllRestaurants",
			Handler:    _Resirvation_GetAllRestaurants_Handler,
		},
		{
			MethodName: "GetRestuarant",
			Handler:    _Resirvation_GetRestuarant_Handler,
		},
		{
			MethodName: "UpdateRestuarant",
			Handler:    _Resirvation_UpdateRestuarant_Handler,
		},
		{
			MethodName: "DeleteRestuarant",
			Handler:    _Resirvation_DeleteRestuarant_Handler,
		},
		{
			MethodName: "Createreservations",
			Handler:    _Resirvation_Createreservations_Handler,
		},
		{
			MethodName: "GetAllReservations",
			Handler:    _Resirvation_GetAllReservations_Handler,
		},
		{
			MethodName: "GetByIdReservations",
			Handler:    _Resirvation_GetByIdReservations_Handler,
		},
		{
			MethodName: "UpdateReservations",
			Handler:    _Resirvation_UpdateReservations_Handler,
		},
		{
			MethodName: "DeleteReservations",
			Handler:    _Resirvation_DeleteReservations_Handler,
		},
		{
			MethodName: "GetReservationsCheck",
			Handler:    _Resirvation_GetReservationsCheck_Handler,
		},
		{
			MethodName: "CreateReservationsOrder",
			Handler:    _Resirvation_CreateReservationsOrder_Handler,
		},
		{
			MethodName: "CreateReservationsPayment",
			Handler:    _Resirvation_CreateReservationsPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resirvation.proto",
}
